# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

# CLUSTER CONFIGURATIONS ········································
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      //"akka.remote.netty.tcp.port=8000"
      hostname = "192.168.1.128"
      //hostname = "127.0.0.1"
      port = 8000
    }
  }

  cluster {
    seed-nodes = [
      //"akka.tcp://ClusterSystem@127.0.0.1:8000",
      //"akka.tcp://ClusterSystem@127.0.0.1:8001"]

      //akka://application////////////////////////////////////////////////////////////
      //"akka.tcp://application@127.0.0.1:8000",
      //"akka.tcp://application@127.0.0.1:8001"]

      "akka.tcp://application@192.168.1.128:8000"]
      //"akka.tcp://application@127.0.0.1:8000"]

    auto-down-unreachable-after = 10s
  }
}
# CLUSTER CONFIGURATIONS END ········································

# ADAPTATIVE LOAD BALANCE CONFIGURATIONS ········································

akka.extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]

# //#min-nr-of-members
akka.cluster.min-nr-of-members = 2
# //#min-nr-of-members

# //#role-min-nr-of-members
#akka.cluster.role {
#  frontend.min-nr-of-members = 1
#  backend.min-nr-of-members = 2
#}
# //#role-min-nr-of-members

# //#adaptive-router
akka.actor.deployment {
  /ChatManager/router = {
    router = adaptive-group
    //metrics-selector = heap
    # metrics-selector = load
    # metrics-selector = cpu
    metrics-selector = mix
    //nr-of-instances = 100

    //router = round-robin-group
    //nr-of-instances = 3

    //router = random-pool
    //nr-of-instances = 3

    routees.paths = ["/user/ChatManager"]
                     //"akka.tcp://application@192.168.1.204:8000/user/ChatManager"]
    cluster {
      enabled = on
      //use-role = backend
      allow-local-routees = on
    }
  }
}
# //#adaptive-router
# ADAPTATIVE LOAD BALANCE CONFIGURATIONS END ········································

